// widgets/side_menu.dart
import 'package:flutter/material.dart';
import '../models/tab_item.dart';
import '../theme/app_colors.dart';
import 'package:google_fonts/google_fonts.dart';
import 'dart:ui';
import 'package:smooth_corner/smooth_corner.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:flutter/services.dart';

class DragToOpenWrapper extends StatelessWidget {
  final Widget child;
  final VoidCallback onOpenMenu;
  final double dragWidth;

  const DragToOpenWrapper({
    super.key,
    required this.child,
    required this.onOpenMenu,
    this.dragWidth = 60,
  });

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        child,
        Positioned(
          left: 0,
          top: 0,
          bottom: 0,
          width: dragWidth,
          child: GestureDetector(
            onHorizontalDragStart: (details) {
              if (details.localPosition.dx <= dragWidth) {
                onOpenMenu();
              }
            },
            behavior: HitTestBehavior.translucent,
            child: Container(),
          ),
        ),
      ],
    );
  }
}

class SideMenu extends StatefulWidget {
  final List<TabItem> tabs;
  final int selectedIndex;
  final Function(int) onTabSelected;
  final Function(String) onCreateTab;

  const SideMenu({
    super.key,
    required this.tabs,
    required this.selectedIndex,
    required this.onTabSelected,
    required this.onCreateTab,
  });

  @override
  State<SideMenu> createState() => _SideMenuState();
}

class _SideMenuState extends State<SideMenu> {
  bool _isCreateTabFocused = false;

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () => FocusManager.instance.primaryFocus?.unfocus(),
      child: Drawer(
        width: MediaQuery.of(context).size.width,
        backgroundColor: const Color(0xFFE2E2E2),
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.zero,
        ),
        child: ListView.builder(
          shrinkWrap: true,
          reverse: true,
          padding: EdgeInsets.only(
            left: 8,
            right: 8,
            top: 24,
            bottom: MediaQuery.of(context).viewInsets.bottom + 12 + 24,
          ),
          itemCount: widget.tabs.length + 1,
          itemBuilder: (context, index) {
            return SideMenuTab(
              emoji: index == 0 ? null : widget.tabs[index - 1].emoji,
              title: index == 0 ? 'Make a Tab' : widget.tabs[index - 1].title,
              isSelected: index == 0 ? _isCreateTabFocused : !_isCreateTabFocused && widget.selectedIndex == index - 1,
              onTap: index == 0
                  ? null
                  : () {
                      widget.onTabSelected(index - 1);

                      Navigator.pop(context);
                    },
              onCreateTab: index == 0
                  ? (String title) {
                      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–±
                      widget.onCreateTab(title);
                      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å–µ –µ—â–µ –≤–∞–ª–∏–¥–µ–Ω
                      if (mounted && context.mounted) {
                        Navigator.pop(context);
                      }
                    }
                  : null,
              onFocusChange: index == 0
                  ? (focused) {
                      setState(() {
                        _isCreateTabFocused = focused;
                      });
                    }
                  : null,
              isCreateTab: index == 0,
              index: index,
              tabsCount: widget.tabs.length + 1,
            );
          },
        ),
      ),
    );
  }
}

class SideMenuTab extends StatefulWidget {
  final String? emoji; // –ú–æ–∂–µ—Ç –±—ã—Ç—å null –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è
  final String? title; // –ú–æ–∂–µ—Ç –±—ã—Ç—å null –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è
  final bool isSelected;
  final VoidCallback? onTap; // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–∞–±–∞
  final Function(bool)? onFocusChange; // –î–ª—è —Ç–∞–±–∞ —Å–æ–∑–¥–∞–Ω–∏—è
  final bool isCreateTab; // –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ —ç—Ç–æ —Ç–∞–± —Å–æ–∑–¥–∞–Ω–∏—è
  final int index;
  final int tabsCount;
  final Function(String)? onCreateTab; // –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∞–±–∞

  const SideMenuTab({
    super.key,
    this.emoji,
    this.title,
    required this.isSelected,
    this.onTap,
    this.onFocusChange,
    this.isCreateTab = false,
    required this.index,
    required this.tabsCount,
    this.onCreateTab,
  });

  @override
  State<SideMenuTab> createState() => _SideMenuTabState();
}

class _SideMenuTabState extends State<SideMenuTab> {
  // bool _visible = false;
  bool _isEditing = false;
  String? _selectedEmoji;
  String? _lastText;
  final _controller = TextEditingController();
  final _focusNode = FocusNode();
  final _keyboardListenerFocusNode = FocusNode();
  bool _canDeleteEmoji = true;

  @override
  void initState() {
    super.initState();
    // Future.delayed(Duration(milliseconds: 50 * widget.index), () {
    //   if (mounted) {
    //     setState(() => _visible = true);
    //   }
    // });

    if (widget.isCreateTab) {
      _focusNode.addListener(() {
        widget.onFocusChange?.call(_focusNode.hasFocus);
        if (!_focusNode.hasFocus) {
          _isEditing = false;
        }
        setState(() {});
      });

      _controller.addListener(() {
        final text = _controller.text;
        print('\nüîµ -------- TextField Event --------');
        print('üîµ –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: "$text"');
        print('üîµ –ï—Å—Ç—å —ç–º–æ–¥–∑–∏: ${_selectedEmoji != null}');
        print('üîµ –î–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≥–∞–ª–æ—á–∫–∞: ${text.isNotEmpty}');

        if (text.isEmpty && _lastText?.isNotEmpty == true) {
          _canDeleteEmoji = false;
          print('üîµ –ë–ª–æ–∫–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –Ω–∞ 200–º—Å');
          Future.delayed(const Duration(milliseconds: 200), () {
            if (mounted) {
              setState(() => _canDeleteEmoji = true);
              print('üîµ –†–∞–∑—Ä–µ—à–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏');
            }
          });
        } else if (text.isNotEmpty && _selectedEmoji == null) {
          final isEmojiResult = isEmoji(text);
          if (isEmojiResult) {
            print('üîµ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç–µ: "$text"');
            final emoji = text;
            _controller.clear();
            setState(() {
              _selectedEmoji = emoji;
              print('üîµ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —ç–º–æ–¥–∑–∏: $_selectedEmoji');
            });
          }
        }

        _lastText = text;
        setState(() {});
        print('üîµ --------------------------------\n');
      });
    }
  }

  bool isEmoji(String text) {
    if (text.isEmpty) {
      print('üîµ isEmoji: —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π');
      return false;
    }

    final runes = text.runes.toList();
    print('üîµ isEmoji: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç: "$text"');
    print('üîµ isEmoji: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–Ω: ${runes.length}');
    print('üîµ isEmoji: –∫–æ–¥—ã: ${runes.map((r) => '0x${r.toRadixString(16)}').join(", ")}');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã —ç–º–æ–¥–∑–∏
    for (final rune in runes) {
      final isInRange = (rune >= 0x1F300 && rune <= 0x1F9FF) || // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–º–æ–¥–∑–∏
          (rune >= 0x2600 && rune <= 0x26FF) || // –†–∞–∑–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
          (rune >= 0x2700 && rune <= 0x27BF) || // Dingbats
          (rune >= 0xFE00 && rune <= 0xFE0F); // –í–∞—Ä–∏–∞—Ü–∏–∏

      print('üîµ isEmoji: —Ä—É–Ω–∞ 0x${rune.toRadixString(16)} ${isInRange ? '–≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ' : '–Ω–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ'}');

      if (!isInRange) {
        print('üîµ isEmoji: –Ω–µ —ç–º–æ–¥–∑–∏');
        return false;
      }
    }

    print('üîµ isEmoji: —ç—Ç–æ —ç–º–æ–¥–∑–∏');
    return true;
  }

  @override
  Widget build(BuildContext context) {
    return TweenAnimationBuilder<double>(
      tween: Tween(begin: -1.0, end: 0),
      duration: const Duration(milliseconds: 200),
      curve: Curves.easeOutCubic,
      builder: (context, value, child) {
        return Transform.translate(
          offset: Offset(value * 100, 0),
          child: Opacity(
            opacity: value == -1 ? 0 : 1,
            child: child,
          ),
        );
      },
      child: Padding(
        padding: const EdgeInsets.symmetric(
          vertical: 4,
          horizontal: 16,
        ),
        child: AnimatedContainer(
          duration: const Duration(milliseconds: 450),
          curve: Curves.easeInOut,
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(12),
            color: (widget.isCreateTab && _focusNode.hasFocus) || widget.isSelected
                ? AppColors.getSecondaryBackground(context).withOpacity(1.0)
                : AppColors.getPrimaryBackground(context).withOpacity(0.0),
            border: (widget.isCreateTab && _focusNode.hasFocus) || widget.isSelected
                ? Border.all(
                    color: AppColors.getTertiaryBackground(context),
                    width: 1,
                  )
                : null,
          ),
          child: widget.isCreateTab ? _buildCreateTab(context) : _buildNormalTab(context),
        ),
      ),
    );
  }

  Widget _buildCreateTab(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(
        horizontal: 20,
        vertical: 16,
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.start,
        children: [
          if (_selectedEmoji != null) ...[
            Text(
              _selectedEmoji!,
              style: TextStyle(
                fontSize: 20,
                fontFamily: GoogleFonts.inter().fontFamily,
              ),
            ),
            const SizedBox(width: 12),
          ],
          if (!_isEditing)
            Container(
              width: 24,
              height: 24,
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(6),
              ),
              margin: const EdgeInsets.only(right: 8),
              child: const Center(
                child: Icon(
                  Icons.add,
                  size: 18,
                  color: Colors.black,
                ),
              ),
            ),
          Expanded(
            child: KeyboardListener(
              focusNode: _keyboardListenerFocusNode,
              onKeyEvent: (event) {
                if (event is KeyDownEvent &&
                    event.logicalKey == LogicalKeyboardKey.backspace &&
                    _controller.text.isEmpty &&
                    _selectedEmoji != null &&
                    _lastText?.isEmpty == true &&
                    _canDeleteEmoji) {
                  print('üîµ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ backspace –≤ –ø—É—Å—Ç–æ–º –ø–æ–ª–µ');
                  print('üîµ –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–∫—Å—Ç –±—ã–ª –ø—É—Å—Ç—ã–º: ${_lastText?.isEmpty}');
                  print('üîµ –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ –Ω–∞–∂–∞—Ç–∏—é backspace');
                  setState(() {
                    _selectedEmoji = null;
                  });
                }
              },
              child: TextField(
                controller: _controller,
                focusNode: _focusNode,
                onTap: () {
                  setState(() {
                    _isEditing = true;
                  });
                },
                textCapitalization: TextCapitalization.sentences,
                style: TextStyle(
                  color: AppColors.getPrimaryText(context),
                  fontSize: 17,
                  letterSpacing: 0.2,
                  fontFamily: GoogleFonts.inter().fontFamily,
                ),
                decoration: InputDecoration(
                  border: InputBorder.none,
                  isDense: true,
                  hintText: 'Make a Tab',
                  hintStyle: TextStyle(
                    color: AppColors.getSecondaryText(context),
                    fontSize: 17,
                    letterSpacing: 0.2,
                    fontFamily: GoogleFonts.inter().fontFamily,
                  ),
                ),
                onSubmitted: (value) {
                  if (value.isNotEmpty) {
                    final title = _selectedEmoji != null ? '$_selectedEmoji $value' : value;
                    widget.onCreateTab?.call(title);
                    setState(() {
                      _isEditing = false;
                      _controller.clear();
                      _selectedEmoji = null;
                    });
                  }
                },
              ),
            ),
          ),
          if (_controller.text.isNotEmpty) ...[
            const SizedBox(width: 16),
            SizedBox(
              width: 24,
              height: 24,
              child: InkWell(
                onTap: () {
                  if (_controller.text.isNotEmpty) {
                    final tabTitle = _selectedEmoji != null ? '$_selectedEmoji ${_controller.text}' : _controller.text;

                    print('üîµ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–±: "$tabTitle"');
                    widget.onCreateTab?.call(tabTitle);

                    setState(() {
                      _isEditing = false;
                      _controller.clear();
                      _selectedEmoji = null;
                    });

                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    FocusScope.of(context).unfocus();
                  }
                },
                child: SvgPicture.asset(
                  'assets/icons/tab_check.svg',
                  width: 24,
                  height: 24,
                  colorFilter: ColorFilter.mode(
                    AppColors.getSecondaryText(context),
                    BlendMode.srcIn,
                  ),
                ),
              ),
            ),
          ],
        ],
      ),
    );
    // : InkWell(
    //     onTap: () async {
    //       // –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å
    //       _focusNode.requestFocus();

    //       // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—á–∞–ª–∞ –ø–æ—è–≤–ª—è—Ç—å—Å—è
    //       await Future.delayed(const Duration(milliseconds: 50));

    //       // –ó–∞—Ç–µ–º –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    //       if (mounted) {
    //         setState(() => _isEditing = true);
    //       }
    //     },
    //     child: Padding(
    //       padding: const EdgeInsets.symmetric(
    //         horizontal: 20,
    //         vertical: 16,
    //       ),
    //       child: Row(
    //         mainAxisAlignment: MainAxisAlignment.start,
    //         children: [
    //           Container(
    //             width: 24,
    //             height: 24,
    //             decoration: BoxDecoration(
    //               color: Colors.white,
    //               borderRadius: BorderRadius.circular(6),
    //             ),
    //             child: const Center(
    //               child: Icon(
    //                 Icons.add,
    //                 size: 18,
    //                 color: Colors.black,
    //               ),
    //             ),
    //           ),
    //           const SizedBox(width: 12),
    //           Text(
    //             'Make a Tab',
    //             style: TextStyle(
    //               color: AppColors.getSecondaryText(context),
    //               fontSize: 17,
    //               letterSpacing: 0.2,
    //               fontFamily: GoogleFonts.inter().fontFamily,
    //             ),
    //           ),
    //         ],
    //       ),
    //     ),
    //   );
  }

  Widget _buildNormalTab(BuildContext context) {
    return InkWell(
      onTap: widget.onTap, // –£–ø—Ä–æ—â–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ _buildCreateTab
      child: Padding(
        padding: const EdgeInsets.symmetric(
          horizontal: 20,
          vertical: 16,
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.start,
          children: [
            Text(
              widget.emoji ?? '',
              style: TextStyle(
                fontSize: 20,
                fontFamily: GoogleFonts.inter().fontFamily,
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: AnimatedDefaultTextStyle(
                duration: const Duration(milliseconds: 300),
                curve: Curves.easeInOut,
                style: TextStyle(
                  color: AppColors.getPrimaryText(context),
                  fontSize: 17,
                  letterSpacing: 0.2,
                  fontWeight: widget.isSelected ? FontWeight.w500 : FontWeight.normal,
                  fontFamily: GoogleFonts.inter().fontFamily,
                ),
                child: Text(widget.title ?? ''),
              ),
            ),
            if (widget.index == 1) ...[
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è Inbox
              const SizedBox(width: 16),
              SizedBox(
                // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ SizedBox —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                width: 24,
                height: 24,
                child: SvgPicture.asset(
                  'assets/icons/tab_pin.svg',
                  width: 24,
                  height: 24,
                  colorFilter: ColorFilter.mode(
                    AppColors.getSecondaryText(context),
                    BlendMode.srcIn,
                  ),
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }

  @override
  void dispose() {
    _controller.dispose();
    _focusNode.dispose();
    _keyboardListenerFocusNode.dispose();
    super.dispose();
  }
}
